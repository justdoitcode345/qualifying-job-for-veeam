/*
  SASS variables are information about icon's compiled state, stored under its original file name

  .icon-home
    width: $icon-home-width

  The large array-like variables contain all information about a single icon
  $icon-home: x y offset_x offset_y width height total_width total_height image_path

  At the bottom of this section, we provide information about the spritesheet itself
  $spritesheet: width height image $spritesheet-sprites
  */
$facebook-name: 'facebook'
$facebook-x: 44px
$facebook-y: 0px
$facebook-offset-x: -44px
$facebook-offset-y: 0px
$facebook-width: 34px
$facebook-height: 15px
$facebook-total-width: 201px
$facebook-total-height: 16px
$facebook-image: '../prod/images/sprite.png'
$facebook: (44px, 0px, -44px, 0px, 34px, 15px, 201px, 16px, '../prod/images/sprite.png', 'facebook', )
$googleplus-name: 'googleplus'
$googleplus-x: 0px
$googleplus-y: 0px
$googleplus-offset-x: 0px
$googleplus-offset-y: 0px
$googleplus-width: 24px
$googleplus-height: 15px
$googleplus-total-width: 201px
$googleplus-total-height: 16px
$googleplus-image: '../prod/images/sprite.png'
$googleplus: (0px, 0px, 0px, 0px, 24px, 15px, 201px, 16px, '../prod/images/sprite.png', 'googleplus', )
$inshare-name: 'inshare'
$inshare-x: 158px
$inshare-y: 0px
$inshare-offset-x: -158px
$inshare-offset-y: 0px
$inshare-width: 43px
$inshare-height: 16px
$inshare-total-width: 201px
$inshare-total-height: 16px
$inshare-image: '../prod/images/sprite.png'
$inshare: (158px, 0px, -158px, 0px, 43px, 16px, 201px, 16px, '../prod/images/sprite.png', 'inshare', )
$twitter-name: 'twitter'
$twitter-x: 98px
$twitter-y: 0px
$twitter-offset-x: -98px
$twitter-offset-y: 0px
$twitter-width: 40px
$twitter-height: 15px
$twitter-total-width: 201px
$twitter-total-height: 16px
$twitter-image: '../prod/images/sprite.png'
$twitter: (98px, 0px, -98px, 0px, 40px, 15px, 201px, 16px, '../prod/images/sprite.png', 'twitter', )
$spritesheet-width: 201px
$spritesheet-height: 16px
$spritesheet-image: '../prod/images/sprite.png'
$spritesheet-sprites: ($facebook, $googleplus, $inshare, $twitter, )
$spritesheet: (201px, 16px, '../prod/images/sprite.png', $spritesheet-sprites, )

/*
  The provided mixins are intended to be used with the array-like variables

  .icon-home
    @include sprite-width($icon-home)

  .icon-email
    @include sprite($icon-email)

  Example usage in HTML:
    `display: block` sprite:
    <div class="icon-home"></div>

  To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
    // CSS
    .icon {
      display: inline-block;
    }

    // HTML
    <i class="icon icon-home"></i>
  */
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

/*
  The `sprites` mixin generates identical output to the CSS template
    but can be overridden inside of SASS

  @include sprites($spritesheet-sprites)
  */
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
